@startuml
class Main
note left: Парсинг аргументов, инициализация Game, UI.

class GameController {
    FightResult fight(fighter attacker, fighter target)
}

note right : Является верхним классом доменной модели игры.\n\
Инкапсулирует в себе всю игровую логику от UI.\n\
Сам должен содержать только логику игровых тиков,\n\
в остальном должен пользоваться дочерними объектами.

enum FightResult {
  HIT(hp)
  MISS
}

class Map {
    tiles: Map(Position -> Floor|Wall)
    items: Map(Position -> [Items])
}

Map *-- Item

class GameBuilder<? extends MobsFabric> {
    ???
}


class "Map" as MapBuilder <<companion>> {
    loadFile(filename)
    generate(width, height)
}

class UI {
    UI(gameController)
}

class Player {
}

Interface Fighter {
    int getEvasion()
    int getArmor()
    int dealDamage(fighter target)
    int takeDamage(hp)
}

class Experience {
}

class Inventory {
}

interface Item {

}

abstract MobStrategy {
    doTurn(curHp, curPosition): Position
}

abstract Mob {
    private int hp, xp;
    doTurn()
    Mob(GameController, Position, MobStrategy)
    getHp(), getXP()
}

class ConfusedMobDecorator {
    - Mob mob
    - int confusionDuration
    doTurn()
}

class Position {
    int x, y;
}

Main *- Args
Main *-- GameBuilder
GameBuilder *-- MapBuilder

Main *-- GameController
GameController *-- GameContext
GameController *-- Fight

GameContext <-- "produces" GameBuilder
Map <-- MapBuilder : "produces" 

GameContext *-- Player
GameContext "1" *-- "*" Mob
GameContext *-- Map

GameController -- FightResult

UI --> GameController
Main *- UI

Mob *-- Position
Mob --> MobStrategy
Player *-- Position

Mob <|-- Zombie
Mob <|-- AcidBlob
Mob <|-- ConfusedMobDecorator

MobStrategy <|-- AggressiveStrategy
MobStrategy <|-- PassiveStrategy
MobStrategy <|-- СautiousStrategy
MobStrategy --> GameContext

Player *-- Inventory
Inventory "1" *-- "*" Item
Item <|-- Armor
Item <|-- Weapon

Player *-- Experience
Fighter <|-- Player
Fighter <|-- Mob

@enduml
